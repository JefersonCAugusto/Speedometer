// pinagem modulo lcd
sbit LCD_RS at RE2_bit;
sbit LCD_EN at RE1_bit;
sbit LCD_D4 at RD4_bit;
sbit LCD_D5 at RD5_bit;
sbit LCD_D6 at RD6_bit;
sbit LCD_D7 at RD7_bit;

sbit LCD_RS_Direction at TRISE2_bit;
sbit LCD_EN_Direction at TRISE1_bit;
sbit LCD_D4_Direction at TRISD4_bit;
sbit LCD_D5_Direction at TRISD5_bit;
sbit LCD_D6_Direction at TRISD6_bit;
sbit LCD_D7_Direction at TRISD7_bit;

// Defines
#define IS_INTERRUPT PIR1.RCIF // exemplo
#define END_MESSAGE '*'
/************************************
 *	Ação da Interrupção (high)		*
 *									*
 *************************************/
void interrupt() //TODO: lembrar de configurar interrupt high level e pegar registrador responsavel por receber os dados da mensagem serial.
{				
	if (IS_INTERRUPT == 1)
	{
		IS_INTERRUPT = 0;
		if (inicioDeMensagem)
		{
			output[vetorPosicao] = dado_recebido;
			vetorPosicao++;

			if (dado_recebido == END_MESSAGE) 	
			{
				inicioDeMensagem = false;
				mensagemRecebida = true;
			}
		}

		if (dado_recebido == '$')
		{
			mensagemRecebida = false;
			inicioDeMensagem = true;
			limpaOutput();
			vetorPosicao = 0;
		}
	}
}
/************************************
 *			Prototipagem			*
 *			de Funções  			*
 *									*
 *************************************/
void Animacao(string frase);
void limpaOutput();
void Apresenta_hora();
/************************************
 *				MAIN  				*
 *									*
 *************************************/

void main()
{
	/************************************
	 *			variáveis	 			*
	 *************************************/
	char output[90];
	bool inicioDeMensagem = false;
	bool mensagemRecebida = false;
	unsigned int vetorPosicao = 0;
	unsigned int contagemQuandoSemSinal = 0;
	unsigned int estado = 0;
	Animacao("Velocimentro 3.0");

	/************************************
	 *									*
	 * 		 	 	i/o					*
	 *									*
	 *************************************/

	/************************************
	 *	ttmr0 para 1 segundo			*
	 * 		 carga é c2f7				*
	 *									*
	 *************************************/
	T0CON = 0B10000110; // ATIVEI     16BYTS          TEMPORIZADOR       BODA DESCIDA        ATIVA PRESCALER       CONFIGURA PRESCALER
	TMR0L = 0XF7;
	TMR0H = 0XC2;
	INTCON.TMR0IF = 0;
	/************************************
	 *	Config de interrupção 			*
	 *	TMR0/							*
	 *************************************/

	INTCON.TMR0IE = 1; // Habilita interrupção do timer0.
	INTCON.TMR0IF = 0; // Apaga flag de estouro do timer0, pois é fundamental para a sinalização do estouro.
	T0CON.TMR0ON = 1;  // Liga timer0.

	INTCON.GIE = 1;	 // Habilita as interrupções
	INTCON.PEIE = 1; // Habilita as interrupções dos perifericos.

	/************************************
	 *			Setup  					*
	 *									*
	 *************************************/
	ADCON1 = 0x0f;			  // Configura Todos A/D como I/O
	Lcd_Init();				  // inicializa lcd nible menos significaivo           lembrar de conferir a ordem de mosi miso
	Lcd_Cmd(_LCD_CLEAR);	  // limpa tudo
	Lcd_Cmd(_LCD_CURSOR_OFF); // desliga cursor

	UART1_Init(9600); // Initialize UART module at 9600 bps
	Delay_ms(100);	  // Wait for UART module to stabilize

	while (1)
	{
		bool sinalGpsOk = buffer[17] == 'A';
		
		if (mensagemRecebida && sinalGpsOk)
		{
			Apresenta_hora(output);
			
			if (messageType(output) == 1)	//GPRMC
			{
				int velocidade = CalculaVelocidade(output);
				ApresentaVelocidade(velocidade);
			}			
		}
		if (mensagemRecebida && !sinalGpsOk)
		{
			WaitingSignalGps();
			AnimacaoSemSinal();
		}
		
		mensagemRecebida = false;
		
	}
}

void Animacao(string frase)
{
	Lcd_Out(1, 1, "                " + frase);
	for (j = 0; j < 16; j++)
	{
		Lcd_Cmd(_LCD_SHIFT_LEFT);
		delay_ms(200);
	}
	delay_ms(2000);
}

void Apresenta_hora(char buffer[90])
{
			Lcd_Out(1,1, "Hour-"
			Lcd_Chr_Cp(buffer[7]);
			Lcd_Chr_Cp(buffer[8]);
			Lcd_Chr_Cp(':');
			Lcd_Chr_Cp(buffer[9]);
			Lcd_Chr_Cp(buffer[10]);
			Lcd_Chr_Cp(':');
			Lcd_Chr_Cp(buffer[11]);
			Lcd_Chr_Cp(buffer[12]);
		
}

void limpaOutput(){
	for (int i = 0; i <= 90; i++)
	{
		output[i] = 0;
	}
}

int messageType(char outputMessage[90])
{
	if(outputMessage[0]=='G' && outputMessage[1]=='P' && outputMessage[1]=='R' && outputMessage[1]=='M' && outputMessage[1]=='C')
		return 1;	
	return 0;
}

void WaitingSignalGps()
{
	Lcd_Out(2,1, "waiting signal");	
}

void AnimacaoSemSinal()
{
	Lcd_Out(2,16, 0B'01011100');
	delay_ms(350);
	Lcd_Out(2,16, 0B'00101111');
	delay_ms(350);
}

int ApresentaVelocidade(char buffer[90])
{
	char speedInString[3] = {buffer[44],buffer[46],buffer[47]};
	
	float speedInFloat = 0000;  //TODO: Ver como funciona conversor de string para float

	float KmPHora = speedInFloat / 100;

	Lcd_Clear();

	Apresenta_hora(buffer);

	Lcd_Out(2,1, "Speed: "

	Lcd_Chr_Cp(kmPHora); //TODO talvez seja necessário converte de float para string
}